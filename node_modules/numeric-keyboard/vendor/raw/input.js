import tmpl from './tmpl'
import { Options as OPTIONS, Mixins } from 'lib/input'
import 'lib/style/input.styl'

const rcapital = /[A-Z]/g

const template = `
<div className={className} onTouchEnd={this.onFocus.bind(this)}>
  <input type="hidden" name="<%=kp.name%>" value="<%=kp.value%>" />
  <div>
    {this.ks.rawValue.length === 0 && <span className="numeric-input-placeholder"><%=kp.placeholder%></span>}
    {this.ks.rawValue.map((c, i) => <span key={i} data-index={i + 1}>{c}</span>)}
    {this.ks.cursorTimer && <i style={{backgroundColor: this.ks.cursorColor, display: this.ks.cursorVisible ? '' : 'none'}}></i>}
  </div>
</div>
`

export default function Keyboard(el, options) {
  if (typeof el === 'string') {
    el = document.querySelector(el)
  }

  options = Object.assign({}, OPTIONS, options)

  this.init(options)

  for (let key in this._keys) {
    let css = ''
    for (let name in this._keys[key].style) {
      css += `${name.replace(rcapital, s => '-' + s.toLowerCase())}:${this._keys[key].style[name]};`
    }
    this._keys[key].csstext = css
  }
  
  el.innerHTML = tmpl(template, this)

  el.addEventListener('touchstart', this.touchstart.bind(this), false)
  el.addEventListener('touchend', this.touchend.bind(this), false)

  this._options = options
}

Keyboard.prototype = Mixins
Keyboard.prototype.constructor = Keyboard
Keyboard.prototype.dispatch = function (event, ...args) {
  const callback = this._options[`on${event}`]
  if (callback) {
    callback(...args)
  } 
}
Keyboard.prototype.touchstart = function (e) {
  if (e.target.tagName === 'TD') {
    this.ontouchstart(this._keys[e.target.getAttribute('data-key')], e)
  }
}
Keyboard.prototype.touchend = function (e) {
  if (e.target.tagName === 'TD') {
    this.ontouchend(this._keys[e.target.getAttribute('data-key')], e)
  }
}